import re
import sys
import time
import logging
import subprocess
from stem.util import system, term
from stem import process as tor_process
from tempfile import mkdtemp


def free_port():
  """
  Determines a free port using sockets.
  Taken from selenium python.
  """
  free_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  free_socket.bind(('0.0.0.0', 0))
  free_socket.listen(5)
  port = free_socket.getsockname()[1]
  free_socket.close()
  return port


class TorInit():
  def __init__(self, socks_port, control_port):
    self.socks_port = socks_port
    self.control_port = control_port
    self.check_tor_command = "lsof -n -i :{}".format(socks_port)
    self.data_directory = mkdtemp()
    self._checkTorStatus()

  def _checkTorStatus(self):
    proc1 = subprocess.Popen(self.check_tor_command.split(), stdout=subprocess.PIPE)
    port_status = proc1.communicate()[0]

    if port_status:

      print(port_status)
      pid = re.search(r"\d{1,}", str(port_status)).group()
      subprocess.Popen("kill {}".format(pid).split(), stdout=subprocess.PIPE).communicate()
      print('kill success')
      # self._startTorProxy()

    time.sleep(0.1)

  def _startTorProxy(self):
    # self._checkTorStatus()

    tor_process.launch_tor_with_config(
        config={
            'SocksPort': str(self.socks_port),
            'ControlPort': str(self.control_port),
        },
        init_msg_handler=self._print_bootstrap_lines,
        timeout=300
    )

    print('Start tor success')

  def _print_bootstrap_lines(self, line):
    if "Bootstrapped " in line:
      line = term.format(line, term.Color.GREEN)
      self._display_msg(line)

  def _display_msg(self, msg_context, msg_type=None):
    '''
    display_msg
    *description*
    Display the processing message of the process.
    '''
    if msg_type:
      message = '[{0}] {1} \n'.format(msg_type, msg_context)
    else:
      message = '{0} \n'.format(msg_context)
    sys.stdout.write(message)


if __name__ == '__main__':

  tor = TorInit(socks_port=9050, control_port=9050)
  tor._startTorProxy()

  tor._checkTorStatus(socks_port=9050, control_port=9051)
  tor._startTorProxy()
