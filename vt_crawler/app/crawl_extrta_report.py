import requests
import json
import random
import logging
import time
import os
import pickle
from tor_init import TorInit
import configparser
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
parpath = os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir))
# config = configparser.ConfigParser()
# config.read(parpath + "/config.ini")
# TXT_PATH = config.get("filepath", "txt_path")
TXT_PATH = '/Users/macos/Desktop/vt_cralwer/txt_output_extra/'

class VTReportDownloader(object):

    def __init__(self, _url_list=[], socks_port=9050):
        self.url_list = _url_list
        self.user_agent = ''
        self.proxies = {
            # 'http': 'socks5h://127.0.0.1:9050',
            'https': 'socks5h://127.0.0.1:{}'.format(socks_port)
        }

    def _sys_sleep(self):
        u = random.uniform(0, 0.25)
        logging.info('system sleeps {} seconds...'.format(u))
        time.sleep(u)

    def get_page_source(self, url):
        if url is None:
            return None
        s = requests.Session()
        s.proxies = self.proxies
        headers = {
            'User-Agent': self.user_agent,
        }
        # Make the HTTP request through the session.
        r = s.get(url, headers=headers)
        # r = s.get(url)
        # Check if the proxy was indeed used (the text should contain the proxy IP).
        if r.status_code == 200:
            r.encoding = 'utf-8'
            html_contnet = r.text
            return html_contnet
        return None

    def save_report_2_txt(self, url):
        json_response = self.get_page_source(url)
        if json_response is None:
            logging.info('json_response is None.')
        # self._sys_sleep()
        if json_response is not None:
            sha256 = url.split('/')[-1]
            with open('{}.txt'.format(TXT_PATH + sha256), 'w') as f:
                f.write(json_response)

    def batch_save_report_2_txt(self):
        for i, u in enumerate(self.url_list):
            if i % 1000 == 0:
                print(i, 'th done.')

            logging.info('crawling vt report: {} ...'.format(u))
            json_response = self.get_page_source(u)
            # self._sys_sleep()
            if json_response is not None:
                sha256 = u.split('/')[-1]
                with open('{}.txt'.format(TXT_PATH + sha256), 'w') as f:
                    f.write(json_response)
            else:
                logging.info('json_response is None.')
                return 1


if __name__ == '__main__':

    tor = TorInit(socks_port=9052, control_port=9053)
    tor._startTorProxy()

    limit_try = 2000
    # next_url = None

    while limit_try > 0:

        try:
            # done = [file.replace('.txt', '') for file in os.listdir(TXT_PATH) if file.endswith('.txt')]
            # sha_list = [sha.replace('.danger', '') for sha in open(parpath + '/malware_hash_5F.txt', 'r').read().split('\n') if sha.endswith('.danger')]
            # sha_list = pickle.load(open(parpath + '/malware_5f_unpacked_sample_shas.pkl', 'rb'))

            # sha_list = set(sha_list) - set(done)
            sha_list = [
		'b7c5f5bd67264a5cdd2cdeface70bdd3197e397779145872b232bc5f3bb4b28c',
		]
            logging.info('{} shas in total.'.format(len(sha_list)))

            if not sha_list:
                break
            else:
                for sha in sha_list:
                    _url = 'https://www.virustotal.com/ui/files/{}'.format(sha)

                    test = VTReportDownloader(socks_port=9052)
                    report = test.get_page_source(_url)

                    if report is not None:
                        with open('{}.txt'.format(TXT_PATH + sha), 'w') as f:
                            f.write(report)
                        logging.info('Report downloaded: {}'.format(sha))

                    if report is None:
                        tor._checkTorStatus()
                        tor._startTorProxy()
                        limit_try -= 1
                        logging.info('restart tor process, limit try : {}'.format(limit_try))
                        continue
                break
        except Exception as e:
            logging.info('fail dumps : {}, limit try : {}'.format(e, limit_try))
            if not limit_try:
                logging.info('finish total dumps')
                break
            limit_try -= 1

            tor._checkTorStatus()
            tor._startTorProxy()

            logging.info('restart tor process, limit try : {}'.format(limit_try))
