import sys
import logging

logging.basicConfig(format="%(asctime)s : %(levelname)s : %(message)s", level=logging.INFO)


class VTJsonParser(object):
    def __init__(self, json_response):
        self.json_response = json_response
        self._attributes = self._get_attributes()

    def _get_id(self):
        """
        :param json_response: the VirusTotal report JSON response from VT website.
        :return: the sha-256 of the file searched.
        """
        try:
            return self.json_response['data']['id']
        except:
            return None

    def _get_links(self):
        """
        :param json_response: the VirusTotal report JSON response from VT website.
        :return: the resource url.
        """
        try:
            return self.json_response['data']['links']['self']
        except:
            return None

    def _get_type(self):
        """
        :param json_response: the VirusTotal report JSON response from VT website.
        :return: the type of the file searched.
        """
        try:
            return self.json_response['data']['type']
        except:
            return None

    def _get_attributes(self):
        """
        :param json_response: the VirusTotal report JSON response from VT website.
        :return: the whole attributes of the file searched.
        """
        try:
            return self.json_response['data']['attributes']
        except:
            return None

    def _try_get_values(self, key=''):
        try:
            return self._attributes[key]
        except:
            return None
            logging.info("doesn't have {}".format(key))

    def get_basic_properties_dict(self):
        """Basic attributes that allow you to further identify the file being studied.
        :param json_response: the VirusTotal report JSON response from VT website.
        :return: the summary of attributes of the file searched.
        """
        res_dic = {}
        res_dic['md5'] = self._try_get_values('md5')
        res_dic['sha1'] = self._try_get_values('sha1')
        res_dic['sha256'] = self._try_get_values('sha256')
        res_dic['vhash'] = self._try_get_values('vhash')
        res_dic['authentihash'] = self._try_get_values('authentihash')
        try:
            res_dic['imphash'] = self._attributes['pe_info']['imphash']
        except:
            res_dic['imphash'] = None
            logging.info("doesn't have imphash")
        res_dic['ssdeep'] = self._try_get_values('ssdeep')
        try:
            res_dic['FileType'] = self._attributes['exiftool']['FileType']
        except:
            res_dic['FileType'] = None
            logging.info("doesn't have FileType")
        res_dic['magic'] = self._try_get_values('magic')
        res_dic['size'] = self._try_get_values('size')  # in bytes
        try:
            res_dic['peid'] = self._attributes['packers']['PEiD']
        except:
            res_dic['peid'] = None
            logging.info("doesn't have PEiD")
        res_dic['type_tag'] = self._try_get_values('type_tag')
        return res_dic

    def get_history_dict(self):
        """Relevant dates related to the file being studied.
        :param json_response: the VirusTotal report JSON response from VT website.
        :return: the summary of historical timeline of the file searched.
        """
        keys = ['creation_date', 'first_submission_date', 'last_analysis_date', 'last_modification_date', 'last_submission_date']
        res_dic = {k: self._try_get_values(k) for k in keys}
        return res_dic

    def get_names_list(self):
        """Name with which the file has been submitted or seen in the wild.
        :param json_response: the VirusTotal report JSON response from VT website.
        :return: the summary of history timeline of the file searched.
        """
        return self._try_get_values('names')

    def get_exiftool_metadata_dict(self):
        """Details provided by Phil Harvey's ExifTool about the file being studied.
        :param json_response: the VirusTotal report JSON response from VT website.
        :return: the summary of ExifTool File Metadata of the file searched.
        """
        # ExifTool File Metadata
        return self._try_get_values('exiftool')

    def get_detection_results_dict(self):
        """
        :param json_response: the VirusTotal report JSON response from VT website.
        :return: the summary of last analysis results of the file searched.
        """
        # last_analysis_results
        _lar = self._attributes['last_analysis_results']
        res_dic = {k: (_lar[k]['result'] if _lar[k]['result'] != None else 'Undectected') for k in _lar}
        return res_dic

    def get_sections_dict(self):
        try:
            return self._attributes['pe_info']['sections']
        except:
            return None

    def get_all_report_results(self):
        all_res_dict = {}
        try:
            all_res_dict['id'] = self._get_id()
            all_res_dict['links'] = self._get_links()
            all_res_dict['type'] = self._get_type()
            all_res_dict['basic_properties'] = self.get_basic_properties_dict()
            all_res_dict['history'] = self.get_history_dict()
            all_res_dict['names'] = self.get_names_list()
            all_res_dict['sections'] = self.get_sections_dict()
            all_res_dict['exiftool_metadata'] = self.get_exiftool_metadata_dict()
            all_res_dict['detection_results'] = self.get_detection_results_dict()
            return all_res_dict
        except Exception as e:
            error = (str('--Error on line {}'.format(sys.exc_info()[-1].tb_lineno) + str(e)))
            logging.info("{}".format(error))


if __name__ == '__main__':

    import json

    OUTPUT_PATH = '/Users/bensonbair/Documents/projects/III/virustotal_crawler/txt_output_20200302/'
    sha256 = 'ffeadc0e77f6d17620a22296a3d3acc8e44f6dc9bf7581f900b136ce8c4ffbb1'
    _txt_filename = '{}.txt'.format(sha256)
    report = open(OUTPUT_PATH + _txt_filename, 'r').read()
    json_respond = json.loads(report)
    # print(json_respond)
    tobj = VTJsonParser(json_respond)
    print(json.dumps(tobj.get_all_report_results(), indent=4))
    # print(tobj.get_sections_dict())
