from functools import wraps
import errno
import os
import signal
import multiprocessing


def get_num_of_cores():
    return multiprocessing.cpu_count()


def read_file(filename):
    try:
        source_file = open(filename, mode="r", encoding="utf-8")
        return source_file
    except:
        print('cannot utf-8')
    try:
        source_file = open(filename, mode="r")
        return source_file
    except Exception as e:
        print(e)


class TimeoutError(Exception):
    pass


def timeout(seconds=10, error_message=os.strerror(errno.ETIME)):
    def decorator(func):
        def _handle_timeout(signum, frame):
            raise TimeoutError(error_message)

        def wrapper(*args, **kwargs):
            signal.signal(signal.SIGALRM, _handle_timeout)
            signal.alarm(seconds)
            try:
                result = func(*args, **kwargs)
            finally:
                signal.alarm(0)
            return result

        return wraps(func)(wrapper)

    return decorator


def limit_try(func):
    def wrap_function(*args, **kwargs):
        limit_try = 10
        results = None
        while limit_try:
            try:
                results = func(*args, *kwargs)
                break
            except Exception as e:
                print('error: {}, limit try: {}'.format(e, limit_try))
                limit_try -= 1
                if not limit_try:
                    print('crawler failed.')
                    results = None
                    break
        return results
    return wrap_function




if __name__ == '__main__':
    a = read_file('/home/bensonbair/malware_classification_workflow/asm_data/experiment_samples_0612/ransomware/ebef0320b12e36eb07f8cbc45905059b7c9add023a92de9d552f412d1d7d8295.txt')
    print(a.read())


