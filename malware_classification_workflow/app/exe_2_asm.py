import os
import subprocess
# import shlex
# from threading import Timer
# from subprocess import Popen, PIPE, call, STDOUT, check_output
import logging
import configparser
logger = logging.getLogger()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')


config = configparser.ConfigParser()
config.read("config.ini")


FROM_PATH = config.get("source_path", "exe_path")
DEST_PATH = config.get("source_path", "asm_path")


def exe2asm(sha):
    input_filename = '{}.danger'.format(sha)
    output_filename = '{}.txt'.format(sha)
    
    log = open(DEST_PATH + output_filename, 'w', encoding="utf-8")
    log.flush()

    cmd = ['objdump', '-Slx', '{}{}'.format(FROM_PATH, input_filename)]
    # proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    proc = subprocess.Popen(cmd, stdout=log, stderr=log)
    try:
        outs, errs = proc.communicate(timeout=30)
    except Exception as e:
        print(e)
        logger.info('Timeout! Your file may be too large.')
        proc.kill()
        # outs, errs = proc.communicate()
    #print('Output: ' + outs.decode('utf-8'))
    #print('Error: '  + errs.decode('utf-8'))
    #print('code: ' + str(proc.returncode))


if __name__ == '__main__':
    
    sha = '4a1ddeffe993aa2332d1b56590fa98969739dde19ed3cca51d2a7421ae62914e'
    exe_2_asm(sha)











