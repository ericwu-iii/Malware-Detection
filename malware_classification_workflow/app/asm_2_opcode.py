from pyparsing import Word, hexnums, WordEnd, Optional, alphas, alphanums
import pickle
from multiprocessing import Pool
from utils import read_file
import logging
import configparser
logger = logging.getLogger()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')


config = configparser.ConfigParser()
config.read("config.ini")


FROM_PATH = config.get("source_path", "asm_path")
DEST_PATH = config.get("source_path", "opcode_path")
NUM_CORES = int(config.get("multiprocess", "num_of_cores"))

# use WordEnd to avoid parsing leading a-f of non-hex numbers as a hex
hex_integer = Word(hexnums) + WordEnd()
lineline = Word(hexnums) + ":" + Optional((hex_integer * (1,))("instructions")) + Optional(Word(alphas, alphanums)("opcode"))


def line2opc(line):
  try:
    result = lineline.parseString(line)
    if "opcode" in result:
      return str(result.opcode)
  except Exception as e:
    return None


def asm2opc_multi_process(sha, num_cores):
  input_filename = '{}.txt'.format(sha)
  output_filename = '{}.ins.p'.format(sha)

  source_file = read_file(FROM_PATH + input_filename)
  
  try:
    pool = Pool(num_cores)
    # chunk the work into batches of 4 lines at a time
    source_file = read_file(FROM_PATH + input_filename)
    results = pool.map(line2opc, source_file, num_cores)
    source_file.close()
    pool.terminate()
    results = [opc for opc in results if opc is not None]

    pickle.dump(results, open(DEST_PATH + output_filename, 'wb'))
  except Exception as e:
      if pool:
          pool.terminate()
      logger.info(e)

def asm2opc_single_core(sha):
  input_filename = '{}.txt'.format(sha)
  output_filename = '{}.ins.p'

  source_file = read_file(FROM_PATH + input_filename)

  results_2 = []
  for line in source_file.readlines():
    opc = line2opc(line)
    if opc:
      results_2.append(opc)
  source_file.close()
  return results_2


if __name__ == '__main__':
  import time

  # small
  # sha = '617f90eb8e5cc280825a8f0a3603174b9adca2ea2e99b147a4a85b560c93ae06'
  # big
  sha = '71b688b3386ca6317b1c347f9069c1ed2f1f3c880d1c2bbd1934272bb2e35f9d'
  start_time = time.time()
  asm2opc_multi_process(sha, NUM_CORES)
  print("multi --- %s seconds ---" % (time.time() - start_time))

  # start_time = time.time()
  # asm2opc_single_core(sha)
  # print("single --- %s seconds ---" % (time.time() - start_time))

