import os
import time
from tqdm import tqdm
from exe_2_asm import exe2asm
from asm_2_opcode import asm2opc_multi_process
from fetch_opcode_2_csv import fetch_opc_to_csv
import logging
import configparser
logger = logging.getLogger()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')


config = configparser.ConfigParser()
config.read("config.ini")


PATH = config.get("source_path", "exe_path")
OPCODE_PATH = config.get("source_path", "opcode_path")
NUM_CORES = int(config.get("multiprocess", "num_of_cores"))


def main():
    all_shas = [f.replace('.danger', '') for f in os.listdir(PATH) if f.endswith('.danger')]
    done_shas = [f.replace('.ins.p', '') for f in os.listdir(OPCODE_PATH) if f.endswith('.p')]
    to_do_shas = set(all_shas)-set(done_shas)
    logger.info('len of to_do_shas:{}'.format(len(to_do_shas)))
    
    for sha in to_do_shas:
        print('Converting sha: {}'.format(sha))
        # start_time = time.time()
        exe2asm(sha)
        asm2opc_multi_process(sha, NUM_CORES)
        # print("--- %s seconds ---" % (time.time() - start_time))

        # fetch_opc_to_csv('temp')

    logger.info('Process succeeded.')


if __name__ == '__main__':
    main()











